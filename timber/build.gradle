apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.hamen'

task checkstyle(type: Checkstyle) {
  configFile rootProject.file('checkstyle.xml')
  source 'src/main/java'
  ignoreFailures false
  showViolations true
  include '**/*.java'

  classpath = files()
}

afterEvaluate {
  if (project.tasks.findByName('check')) {
    check.dependsOn('checkstyle')
  }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }

  // default build flavour
  defaultPublishConfig "productionRelease"
  // true to publish all flavour artifacts
  publishNonDefault true
}

// Publish default flavour as main artifact, otherwise the maven pom is not generated
if (android.productFlavors.size() > 0) {
  android.libraryVariants.all { variant ->
    if (android.publishNonDefault && variant.name == android.defaultPublishConfig) {
      def bundleTask = tasks["bundle${name.capitalize()}"]
      artifacts {
        archives(bundleTask.archivePath) {
          classifier null
          builtBy bundleTask
        }
      }
    }
  }
}

configurations {
  lintChecks
}

dependencies {
  provided 'org.jetbrains:annotations:13.0'

  testCompile deps.festandroid
  testCompile deps.festassert
  testCompile deps.junit
  testCompile deps.robolectric

  lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
}

task copyLintJar(type: Copy) {
  from(configurations.lintChecks) {
    rename { 'lint.jar' }
  }
  into 'build/intermediates/lint/'
}

project.afterEvaluate {
  def compileLintTask = project.tasks.find { it.name == 'compileLint' }
  compileLintTask.dependsOn(copyLintJar)
}

// apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
dependencies {
    testCompile 'junit:junit:4.12'
}
